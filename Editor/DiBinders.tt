<#@ template language="C#" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ import namespace="System.Linq" #>
<#@ output extension="g.cs"#>
using System;
using UJect.Factories;
using UJect.Resolvers;
using Uject.Utilities;

namespace UJect
{
<#
    for (int i = 1; i <= 5; i++)
    {
        GenerateBinder(i);
    }
    
    void GenerateBinder(int numInterfaces)
    {
        var interfaceNames = Enumerable.Range(0, numInterfaces).Select(i => $"TInterface{i + 1}");
        var joinedInterfaces = string.Join(", ", interfaceNames);

        var interfaceType = $"IDiBinder<{joinedInterfaces}>";

#>

    public class DiBinder<<#=joinedInterfaces#>> : <#=interfaceType#>
    {
        private readonly DiContainer dependencies;

        private string customId;

        public DiBinder(DiContainer dependencies)
        {
            this.dependencies = dependencies;
        }

        /// <summary>
        /// Bind the type resource with the custom ID provided. This allows disambiguating multiple resources of the same type
        /// </summary>
        /// <param name="id"></param>
        /// <returns>The same binder</returns>
        [LibraryEntryPoint]
        public <#=interfaceType#> WithId(string id)
        {
            customId = id;
            return this;
        }

        /// <summary>
        /// Bind the given type to a provided concrete implementation instance of that type.
        /// </summary>
        /// <param name="instance"></param>
        /// <typeparam name="TImpl"></typeparam>
        /// <returns>The original container</returns>
        [LibraryEntryPoint]
        public DiContainer ToInstance<TImpl>(TImpl instance) where TImpl : <#=joinedInterfaces#>
        {
            var resolver = new InstanceResolver<TImpl>(instance);
            InstallBindings<TImpl>(resolver);
            return dependencies;
        }

        /// <summary>
        /// Bind the given type to a new instance of the provided concrete implementation of that type.
        /// </summary>
        /// <typeparam name="TImpl"></typeparam>
        /// <returns>The original container</returns>
        [LibraryEntryPoint]
        public DiContainer ToNewInstance<TImpl>() where TImpl :  <#=joinedInterfaces#>
        {
            var resolver = new NewInstanceResolver<TImpl>(dependencies);
            InstallBindings<TImpl>(resolver);
            return dependencies;
        }

        /// <summary>
        /// Bind the given type to a function that will provide a concrete instance of that type
        /// </summary>
        /// <param name="factoryMethod"></param>
        /// <returns>The original container</returns>
        [LibraryEntryPoint]
        public DiContainer ToFactoryMethod<TImpl>(Func<TImpl> factoryMethod) where TImpl :  <#=joinedInterfaces#>
        {
            var resolver = new FunctionInstanceResolver<TImpl>(factoryMethod);
            InstallBindings<TImpl>(resolver);
            return dependencies;
        }

        /// <summary>
        /// Bind the given type to a custom resolver.
        /// </summary>
        /// <param name="customResolver"></param>
        /// <typeparam name="TImpl"></typeparam>
        /// <returns>The original container</returns>
        [LibraryEntryPoint]
        public DiContainer ToCustomResolver<TImpl>(IResolver customResolver) where TImpl :  <#=joinedInterfaces#>
        {
            InstallBindings<TImpl>(customResolver);
            return dependencies;
        }

        /// <summary>
        /// Bind the given type to a factory implementation that will provide a concrete instance of that type.
        /// Factories can be injected into before resolution, making them useful when you want to use a bunch of injected resources to
        /// create the instance.
        /// </summary>
        /// <param name="factoryImpl"></param>
        /// <typeparam name="TImpl"></typeparam>
        /// <returns>The original container</returns>
        [LibraryEntryPoint]
        public DiContainer ToFactory<TImpl>(IInstanceFactory<TImpl> factoryImpl) where TImpl :  <#=joinedInterfaces#>
        {
<#
        foreach (var interfaceName in interfaceNames)
        {
#>
            dependencies.InstallFactoryBinding<<#=interfaceName#>, TImpl>(customId, factoryImpl);
<#
        }
#>
            return dependencies;
        }

        private void InstallBindings<TImpl>(IResolver resolver) where TImpl :  <#=joinedInterfaces#>
        {
<#
        foreach (var interfaceName in interfaceNames)
        {
#>
            dependencies.InstallBindingInternal<<#=interfaceName#>, TImpl>(customId, resolver);
<#
        }
#>
        }
    }
<#
    }
#>
}